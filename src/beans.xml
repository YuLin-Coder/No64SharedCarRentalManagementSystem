<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


<context:annotation-config />
	<!-- 扫描 -->
	<context:component-scan base-package="com.yjkj">
		<!-- 不扫描@Controller注解 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 读取JDBC属性配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />


	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<!-- 最大空闲时,经过一个高峰之后,连接池可以将一些用不到的连接释放,一只减少到minIdle为止 -->
		<property name="minIdle" value="5" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间,单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	</bean>
	<!-- 收回的权利:创建SqlSessionFactory,读取核心配置文件以及映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 读取MyBatis的核心配置文件 -->
		<!-- <property name="configLocation" value="/WEB-INF/Mybatis-config.xml"/> -->
		<!-- 读取映射文件 -->
		<property name="mapperLocations" value="classpath*:com/**/model/*Mapper.xml" />
	</bean>
	<!-- 收回的权利:创建实现类读取的是接口代理模式 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage">
			<value>com.**.dao</value>
		</property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 统一配置事务资源 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置哪些事务需要管理 -->
	<tx:advice id="serviceAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="login*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="check*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 加载事务管理 -->
	<aop:config>
		<aop:pointcut expression="execution(* com..service.inte.*Service.*(..))"
			id="servicePointCut" />
		<aop:advisor pointcut-ref="servicePointCut" advice-ref="serviceAdvice" />
	</aop:config>
	<!-- 为事务配置注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
</beans>
